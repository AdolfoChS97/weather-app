{"version":3,"sources":["utils/Converter.ts","components/WeatherInfo.tsx","utils/Axios.ts","services/OpenWeatherRequest.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Converter","kelvinDegrees","celsiusDegrees","WeatherInfo","props","cityName","countryName","weather","main","wind","timezone","console","log","dateTime","moment","format","color","iconsMargin","margin","Grid","container","direction","alignItems","justifyContent","style","item","xs","md","lg","Typography","variant","PlaceOutlined","fontSize","length","map","detail","Tooltip","title","description","src","icon","alt","temp","Math","ceil","kelvinToCelsius","temp_min","temp_max","feels_like","columnSpacing","WaterOutlined","humidity","SpeedOutlined","pressure","AirOutlined","speed","Axios","params","axios","OpenWeatherRequest","appId","this","latitude","longitude","Promise","resolve","reject","request","url","process","method","then","response","data","reason","App","requester","geo","navigator","geolocation","useState","mainCityInformation","changeMainCityInformation","useEffect","getCurrentPosition","position","getCityByCoords","coords","catch","undefined","TextField","label","focused","onChange","event","city","target","value","getCityByName","overwriteCity","name","sys","country","dt","CircularProgress","sx","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.58ddceee.chunk.js","sourcesContent":["export default class Converter {\n    static kelvinToCelsius(kelvinDegrees: number | undefined): number {\n        const celsiusDegrees: number = 273.15 \n        if(kelvinDegrees) return kelvinDegrees - celsiusDegrees\n        else return -celsiusDegrees\n    }\n}","import { WeatherApp } from 'app/@types/weatherApp';\nimport Converter from \"utils/Converter\";\nimport { Grid, Tooltip, Typography } from '@mui/material';\nimport { PlaceOutlined, AirOutlined, WaterOutlined, SpeedOutlined } from '@mui/icons-material/';\nimport moment from 'moment';\n\nexport const WeatherInfo = (props: WeatherApp.Info) => {\n\n    const { cityName, countryName, weather, main, wind, timezone } = props\n    console.log(cityName, countryName, weather, main, wind, timezone);\n    const dateTime = moment().format('MMMM Do YYYY, h:mm:ss a')\n\n    // font color style\n    const color = { color: '#ffffff' }\n    const iconsMargin = { margin: '0px 0px -4px 0px' }\n\n    return (\n        <>\n            <Grid container direction=\"column\" alignItems=\"center\" justifyContent=\"center\" style={{ margin: '3% 0% 3% 0%', ...color}}>\n                <Grid item xs={12} md={5} lg={3} >\n                    <Typography variant={'h4'}>\n                        <PlaceOutlined style={{ margin: '10px 3px -5px 0px', fontSize: '2.125rem' }}/> <b>{cityName},{' '}{countryName}</b>\n                    </Typography>\n                </Grid>\n                <Grid item xs={12} md={5} lg={3}>\n                    <Typography variant={'caption'}>{dateTime}</Typography>\n                </Grid>\n            </Grid> \n            <Grid container direction=\"row\" alignItems=\"center\" justifyContent=\"center\" style={color}>\n                <Grid>\n                    {   weather.length > 0 && \n                            (\n                                weather.map((detail) => (\n                                <Grid item xs md lg>\n                                    <Tooltip title={detail.description}>\n                                        <img \n                                            style={{ fontSize: '6rem' }} \n                                            src={`http://openweathermap.org/img/w/${detail.icon}.png`} \n                                            alt={`${detail.description}`}\n                                        />\n                                    </Tooltip>\n                                </Grid>)\n                                )\n                            )\n                    }\n                </Grid>\n                <Grid>\n                    { main?.temp && \n                            (\n                                <>\n                                    <Grid item xs md lg>\n                                        <Typography variant={'h1'}>\n                                            <b>{Math.ceil(Converter.kelvinToCelsius(main.temp))}Â°</b>\n                                        </Typography>\n                                    </Grid>\n                                </>\n                            )\n                            \n                    }\n                </Grid>\n            </Grid>\n            <Grid container direction=\"column\" alignItems=\"center\" justifyContent=\"center\" style={color}>\n                <Grid item xs md lg>\n                    <Typography variant={'h4'}>\n                        <Tooltip title={'Minimum temperature / Maximum temperature'}>\n                            <b>\n                                {Math.ceil(Converter.kelvinToCelsius(main?.temp_min))}Â°/{Math.ceil(Converter.kelvinToCelsius(main?.temp_max))}Â°\n                            </b>\n                        </Tooltip>\n                        {' '}Feels like{' '}\n                        <Tooltip title={'Thermal sensation'}>\n                            <b>\n                                {Math.ceil(Converter.kelvinToCelsius(main?.feels_like))}Â°\n                            </b>\n                        </Tooltip>\n                    </Typography>\n                </Grid>\n            </Grid>\n            <Grid container  direction=\"column\" alignItems=\"center\" justifyContent=\"center\" style={{ margin: '6% 0% 0% 0%' ,...color}}>\n                <Grid>\n                    <Grid container direction=\"row\" alignItems={'center'} justifyContent={'center'} columnSpacing={8}>\n                        <Grid item>\n                            <Typography variant={'h5'}>\n                                <Grid container direction=\"column\" alignItems={'center'} justifyContent={'center'}>\n                                    <Grid>\n                                        <WaterOutlined style={iconsMargin} /> <b>Humidity</b>\n                                    </Grid>\n                                    <Grid>\n                                        <b>{main?.humidity}%</b>\n                                    </Grid>\n                                </Grid>      \n                            </Typography>\n                        </Grid>\n                        <Grid item>\n                            <Typography variant={'h5'}>\n                                <Grid container direction=\"column\" alignItems={'center'} justifyContent={'center'}>\n                                    <Grid>\n                                        <SpeedOutlined style={iconsMargin} /> <b>Pressure</b>\n                                    </Grid>\n                                    <Grid>\n                                        <b>{main?.pressure}</b>\n                                    </Grid>\n                                </Grid>    \n                            </Typography>\n                        </Grid>\n                        <Grid item>\n                            <Typography variant={'h5'}>\n                                <Grid container direction=\"column\" alignItems={'center'} justifyContent={'center'}>\n                                    <Grid>\n                                        <AirOutlined style={iconsMargin} /> <b>Wind</b>\n                                    </Grid>\n                                    <Grid>\n                                        <b>{wind?.speed}{' '}m/s</b>\n                                    </Grid>\n                                </Grid>    \n                            </Typography>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </>\n        \n    )\n}","import axios from \"axios\";\nimport { Requester } from \"app/@types/request\";\n\nexport default class Axios {\n    \n    static async request(params: Requester.Params) {\n        return await axios({...params})\n    } \n\n}\n","import { OpenWeatherAPI } from 'app/@types/OperWeatherAPI';\nimport Axios from \"utils/Axios\"\n\nexport default class OpenWeatherRequest {\n\n    appId: string  = \"\"\n    cityName: string = \"\"\n\n    constructor(appId: string) {\n        this.appId = appId\n    }\n\n    public getCityByCoords(latitude: number, longitude: number): Promise<OpenWeatherAPI.Response.Place> {\n        return new Promise((resolve, reject) => {\n            Axios.request({ url: `${process.env.REACT_APP_WEATHER_PROTOCOL}${process.env.REACT_APP_WEATHER_API_URL_WEATHER}?lat=${latitude}&lon=${longitude}&appid=${this.appId}`, \n              method: 'GET' }).then((response) => {\n                  resolve(response.data)                  \n              }, (reason) => {\n                  reject(reason)\n              })\n        })\n    }\n    \n    public getCityByName(cityName: string): Promise<OpenWeatherAPI.Response.Place> {\n        return new Promise((resolve, reject) => {\n            Axios.request({ url: `${process.env.REACT_APP_WEATHER_PROTOCOL}${process.env.REACT_APP_WEATHER_API_URL_WEATHER}?q=${cityName}&appid=${this.appId}`, method: 'GET' }).then((response) => {\n                  resolve(response.data)                  \n              }, (reason) => {\n                  reject(reason)\n              })\n        })\n    }\n\n    public overwriteCity(cityName: string) {\n        this.cityName = cityName\n    }\n\n    \n\n}","import { useEffect, useState } from 'react'\nimport { WeatherInfo } from 'components/WeatherInfo'\nimport OpenWeatherRequest from 'services/OpenWeatherRequest'\nimport { OpenWeatherAPI } from 'app/@types/OperWeatherAPI'\nimport { TextField, Grid, CircularProgress } from '@mui/material'\n\nfunction App() {\n  \n  const requester = new OpenWeatherRequest(process.env.REACT_APP_WEATHER_API_PK as string)  \n  const geo = navigator.geolocation\n  const [mainCityInformation, changeMainCityInformation] = useState<OpenWeatherAPI.Response.Place>()\n  \n  useEffect(() => {\n      if(geo) {\n        geo.getCurrentPosition((position) => {\n          requester.getCityByCoords(position.coords.latitude, position.coords.longitude)\n            .then((response) => {\n              changeMainCityInformation({ ...response })\n            })\n            .catch((reason) => changeMainCityInformation(undefined))  \n\n        })\n      }\n\n  }, [])\n\n\n  const searchCity = (city: string) => {\n    requester.getCityByName(city)\n      .then((response) => changeMainCityInformation({ ...response }))\n      .catch((reason) => changeMainCityInformation(undefined))\n    if(mainCityInformation) requester.overwriteCity(mainCityInformation.name)\n  }\n\n  return (\n    <div>\n      { geo && \n        (\n          <>\n            <Grid container direction=\"column\" alignItems=\"center\" justifyContent=\"center\" style={{ margin: '1.5% 0% 3% 0%' }}>\n              <Grid item xs md lg>\n                <TextField label=\"Search your city ...\" variant={'standard'} focused={true} onChange={(event) => searchCity(event.target.value)}/>\n              </Grid>\n            </Grid>\n          </>\n        ) \n      }\n      { mainCityInformation && \n        (\n          <>\n            < WeatherInfo  cityName={mainCityInformation.name} countryName={mainCityInformation.sys.country} weather={mainCityInformation.weather} main={mainCityInformation.main} wind={mainCityInformation.wind} timezone={mainCityInformation.timezone} dateTime={mainCityInformation.dt}  />\n          </>\n        )\n      }\n      { !mainCityInformation && \n        (\n          <>\n            <Grid container direction=\"column\" alignItems=\"center\" justifyContent=\"center\" style={{ margin: '11.5% 0% 3% 0%' }}>\n              <Grid item xs md lg>\n                <CircularProgress sx={{ color: '#fff' }} />\n              </Grid>\n            </Grid>\n          </>\n        )\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}